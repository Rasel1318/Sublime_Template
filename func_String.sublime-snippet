<snippet>
	<content><![CDATA[

bool isVowel(char c) {
    if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') return true;
    if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') return true;
    return false;
}
bool isPalindrome(string s) {
    ll i = 0;
    ll j = s.size() - 1;
    while(i <= j) {
        if(s[i] != s[j]) return false;
        i++;
        j--;
    }
    return true;
}

class Hash{
    const int MOD_1 = 1e9 + 7, MOD_2 = 1e9+33, BASE1 = 26, BASE2 = 27;
    vector<pair<int, int>> hashes, Pow;
 
public:
    Hash(string s){
        hashes.assign(s.size() + 1, {0, 0});
        Pow.assign(s.size() + 1, {1, 1});
        for (int i = 0; i < s.size(); i++){
            hashes[i + 1] = {(1ll * hashes[i].first * BASE1 + (s[i] - 'a' + 1)) % MOD_1,
                            (1ll * hashes[i].second * BASE2 + (s[i] - 'a' + 1)) % MOD_2};
            Pow[i + 1] = {(1ll * Pow[i].first * BASE1) % MOD_1,
                        (1ll * Pow[i].second * BASE2) % MOD_2};
        }
    }
    pair<int,int> get(int l, int r){
        l++, r++;
        int hash1 = (hashes[r].first - (1ll * hashes[l - 1].first * Pow[r - l + 1].first) % MOD_1 + MOD_1) % MOD_1;
        int hash2 = (hashes[r].second - (1ll * hashes[l - 1].second * Pow[r - l + 1].second) % MOD_2 + MOD_2) % MOD_2;
        return {hash1, hash2};
    }
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>func_String</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> 
	</snippet>
