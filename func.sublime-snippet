<snippet>
	<content><![CDATA[
        
const ll MAX = 2e5 + 7;
vector<ll> fact(MAX);

double sqrt_newton(double n) {
    const double eps = 1E-15;
    double x = 1;
    for (;;) {
        double nx = (x + n / x) / 2;
        if (abs(x - nx) < eps)
            break;
        x = nx;
    }
    return x;
}

ll lcm(ll a,ll b) {
    return (a / __gcd(a,b)) * b;
}

ll nCr(ll n, ll r, ll M = mod) {
    if(n < r) return 0;
    return mod_div(fact[n], mod_mul(fact[r], fact[n - r], M), M);
}
void preFactorial(ll M = mod) {
    fact[0] = 1;
    for(ll i = 1; i < MAX; i++) fact[i] = mod_mul(i, fact[i - 1], M);
}

bool isPrime(ll n) {
    if(n == 1) return false;
    for(ll i = 2; i <= sqrt(n); i++) {
        if(n % i == 0) return false;
    }
    return true;
}
vi prime(int n){
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));
    for (int p = 2; p * p <= n; p++) {
        if (prime[p] == true) {
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
    vi pr;
    for (int p = 2; p <= n; p++)
        if (prime[p]) pr.pb(p);
    return pr;
}
map<int,int> primeFactorization(ll n) {
    map<int,int> mp;
    for(ll i = 2; i * i <= n; i++) {
        while(n % i == 0){
            mp[i]++;
            n /= i;
        }
    }
    if(n > 1) mp[n]++;
    return mp;
}
int derangement(int n, int M = mod){
    // Required PreFactorial...
    ll ans = 0;
    int sign = 1;
    for(int i = 2; i<=n; i++){
        if(sign==1){
            ans = (ans+mod_div(fact[n], fact[i]))%mod;
        }else{
            ans = (ans-mod_div(fact[n], fact[i])+mod)%mod;
        }
        sign *= -1;
    }
    return (int)ans;
}


]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>func</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> 
</snippet>
