<snippet>
	<content><![CDATA[

bool isVowel(char c) {
    if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') return true;
    if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') return true;
    return false;
}
bool isPalindrome(string s) {
    ll i = 0;
    ll j = s.size() - 1;
    while(i <= j) {
        if(s[i] != s[j]) return false;
        i++;
        j--;
    }
    return true;
}
const ll MAX = 2e5 + 7;
vector<ll> fact(MAX);

ll binpow(ll a,ll b) {
    ll ans = 1;
    while(b > 0) {
        if((b & 1) == 1) ans *= a;
        a *= a;
        b = b >> 1;
    }
    return ans;
}

ll binpowmod(ll a,ll b, ll M = mod) {
    ll ans = 1;
    while(b > 0) {
        if((b & 1) == 1) {
            ans *= a;
            ans %= M;
        }
        a *= a;
        a %= M;
        b = b >> 1;
    }
    return ans;
}
double sqrt_newton(double n) {
    const double eps = 1E-15;
    double x = 1;
    for (;;) {
        double nx = (x + n / x) / 2;
        if (abs(x - nx) < eps)
            break;
        x = nx;
    }
    return x;
}

ll lcm(ll a,ll b) {
    return (a / __gcd(a,b)) * b;
}
ll mult(ll a, ll b, ll M = mod) {
    return ((a * b) % M);
}
ll inv(ll a, ll M = mod) {
    return binpowmod(a, M - 2, M);
}
ll divide(ll a, ll b, ll M = mod) {
    return mult(a, inv(b, M), M);
}
ll nCr(ll n, ll r, ll M = mod) {
    if(n < r) return 0;
    return divide(fact[n], mult(fact[r], fact[n - r], M));
}
void preFactorial(ll M = mod) {
    fact[0] = 1;
    for(ll i = 1; i < MAX; i++) fact[i] = mult(i, fact[i - 1], M);
}

bool isPrime(ll n) {
    if(n == 1) return false;
    for(ll i = 2; i <= sqrt(n); i++) {
        if(n % i == 0) return false;
    }
    return true;
}
vi prime(int n){
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));
    for (int p = 2; p * p <= n; p++) {
        if (prime[p] == true) {
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
    vi pr;
    for (int p = 2; p <= n; p++)
        if (prime[p]) pr.pb(p);
    return pr;
}
vector<ll> primeFactorization(ll n) {
    vector<ll> factors;
    for(ll i = 2; i * i <= n; i++) {
        ll cnt = 0; 
        while(n % i == 0) {
            cnt++;
            n /= i;
            factors.push_back(i);
        }
    }
    if(n > 1) factors.push_back(n);
    return factors;
}


]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>func</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> 
</snippet>
